generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PP"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  admin       Boolean   @default(false)
  firstName   String?
  lastName    String?
  displayName String?
  student     Boolean
  certificate String?   @db.Text
  rpps        BigInt?
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  approvedAt  DateTime?
  accounts    Account[]
  sessions    Session[]
  plans       Plan[]
  maxId       Int       @default(1)

  @@map("users")
}

enum VoieAdministration {
  ORALE
  CUTANEE
  AURICULAIRE
  NASALE
  INHALEE
  VAGINALE
  OCULAIRE
  RECTALE
  SOUS_CUTANEE
  INTRA_MUSCULAIRE
  INTRA_VEINEUX
  INTRA_URETRALE
  AUTRE
}

model PrincipeActif {
  id           String       @id @default(cuid())
  denomination String       @unique
  medicaments  Medicament[]

  @@map("principes_actifs")
}

model Commentaire {
  id                 String              @id @default(cuid())
  // Si le commentaire est spécifique à une voie d'administration
  voieAdministration VoieAdministration?
  population         String?
  texte              String              @db.Text
  medicament         Medicament?         @relation(fields: [medicamentId], references: [id], onDelete: Cascade)
  medicamentId       String?

  @@index([medicamentId])
  @@map("commentaires")
}

model Medicament {
  id                  String          @id @default(cuid())
  medicamentOld       medics_simple?  @relation(fields: [medics_simpleId], references: [id])
  denomination        String          @unique
  principesActifs     PrincipeActif[]
  /// [Medicament.Indications]
  indications         Json
  conservationFrigo   Boolean
  /// [Medicament.ConservationDuree]
  conservationDuree   Json?
  /// [Medicament.VoiesAdministration]
  voiesAdministration Json
  commentaires        Commentaire[]
  // TODO: Delete precaution_old
  precaution_old      String?
  precaution          Precaution?     @relation(fields: [precautionId], references: [id])
  medics_simpleId     Int?
  plans               Plan[]
  precautionId        Int?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime?       @updatedAt

  @@index([medics_simpleId])
  @@index([precautionId])
  @@map("medicaments")
}

model Precaution {
  id          Int          @id @default(autoincrement())
  mot_cle     String       @unique @db.VarChar(50)
  titre       String       @db.VarChar(200)
  contenu     String       @db.Text
  couleur     String       @db.VarChar(10)
  medicaments Medicament[]

  @@map("precautions")
}

model Plan {
  id          String       @id @default(cuid())
  medics      Medicament[]
  /// [Plan.MedicsOrder]
  medicsOrder Json         @default("[]")
  /// [Plan.Data]
  data        Json?
  /// [Plan.Settings]
  settings    Json?
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  displayId   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt

  @@index([userId])
  @@map("plans")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model calendriers_old {
  id   Int      @id @default(autoincrement())
  user String   @db.Text
  data String   @db.Text
  TIME DateTime @default(now()) @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model medics_simple {
  id                 Int          @id @default(autoincrement())
  nomMedicament      String?      @db.VarChar(200)
  nomGenerique       String?      @db.VarChar(100)
  indication         String?      @db.Text
  frigo              Boolean      @default(false)
  dureeConservation  String?      @db.Text
  voieAdministration String?      @db.VarChar(50)
  matin              String?      @db.VarChar(20)
  midi               String?      @db.VarChar(20)
  soir               String?      @db.VarChar(20)
  coucher            String?      @db.VarChar(20)
  commentaire        String?      @db.Text
  modifie            String?      @default("NOW()") @db.VarChar(20)
  precaution         String?      @db.VarChar(50)
  qui                String?      @db.VarChar(10)
  relecture          Int?         @default(0)
  stat               Int          @default(0)
  Medicament         Medicament[]
}

model plans_old {
  id      Int      @id @default(autoincrement())
  user    String   @db.VarChar(50)
  data    String   @db.Text
  options String?  @db.Text
  TIME    DateTime @default(now()) @db.Timestamp(0)
}
